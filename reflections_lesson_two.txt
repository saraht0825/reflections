What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository you're creating space for git to store commits and code among
different file types so that you or others can access that code later remotely. You need to do it
in order to stage files and save them to your repository.

How is the staging area different from the working directory and the repository? What value 
do you think it offers?

The staging area is different from the working directory in that the staging area is a part of git
and the working directory is only founc locally on your own machine. The value it offers is that it 
allows a space for the user to decide which parts of the working directory should be uploaded to the
repository and in which commits they should be uploaded.

How can you use the staging area to make sure you have one commit per logical change?
The staging area allows you to manually choose which files to stage from the working directory, and you
can also use the command git diff to see what changes happened on which files both within your working
directory and the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would 
branches help?

Branches are helpful to keep your history organized because they allow you to make potentially
drastic changes to your code without affecting the original code. Branches help because the user
gets to decide upon a master branch of a project that stays untouched while also manipulating that
same code to develop new aspects of a project.

How do the diagrams help you visualize the branch structure?

Diagrams help visualize how git commits are stored by showing which commits proceded others. This
approach also allows you to understand how updates and changes are made to your code by viewing them
in a sequence flow. Diagrams also show where experimental branches depart from master branches, and
can give a sense of sanity/comfort to know that changes created on other branches truly do part from
the master branch.

What is the result of merging two branches together? Why do we represent it in the diagram the 
way we do?

Merging the two branches together combines the code from both branches. We represent it in the
diagram as a loop to show that the commits happened seperately but they do relate to one another and
affect one another.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Some of the pros of Git's automatic merging is that simpler files can be conviently merged for a user.
While that could save time and be more efficient, manually merging on Git allows for a user to have
more control over which branches should be combined, when they should be combined, and why/how certain
conflicts within a merge should be resolved.





