When would you want to use a remote repository rather than keeping all your work local?

If you're working on a group project, or if someone else is working on your computer and you'll need 
to access your work from a different location, it's necessary to have a remote. Remotes are also 
useful if you want to keep your work public so that others can contribute to your project.

Why might you want to always pull changes manually rather than having Git automatically stay 
up-to-date with your remote repository?

Pulling from GitHub ensures that your most up-to-date project is accessible to anyone else using your
remote. This is imperative if you're working with other contributors.

Describe the differences between forks, clones, and branches. When would you use one instead of 
another?

A branch is a part of your master project that relates to your original code so that you can 
confidently experiment with your project and/or code without worrying about breaking original content.
It is different from a clone of your repository in that a clone of your repository is usually ready
to be shared remotely. A fork is a clone of your remote but is made from GitHub to GitHub.

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit is that you can work offline. There is also a benefit in having a copy of the last known
state of a remote stored locally in that you can merge newer versions of a project with your fellow
collaborators without too many missing commits and changes to your code.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Instead of using Git or GitHub, you could collaborate in person which would be very unrealistic. Also,
using other cloud services like Google Drive wouldn't work because of coding languages format would
not align with Google text editors. I really think that Git and GitHub offer the best solution.

When would you want to make changes in a separate branch rather than directly in master? What benefits 
does each approach have?

You would want to make changes in a separate branch when you're building new elements of your project
that could break your code on your master branch. The benefits of working in a separate branch allow
for your collaborators to experiment as well and make comments or suggestions to your separate branch.


